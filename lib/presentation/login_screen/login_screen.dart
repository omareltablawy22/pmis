import 'bloc/login_bloc.dart';import 'models/login_model.dart';import 'package:flutter/material.dart';import 'package:pmis/core/app_export.dart';import 'package:pmis/core/utils/validation_functions.dart';import 'package:pmis/widgets/custom_elevated_button.dart';import 'package:pmis/widgets/custom_switch.dart';import 'package:pmis/widgets/custom_text_form_field.dart';
// ignore_for_file: must_be_immutable
class LoginScreen extends StatelessWidget {LoginScreen({Key? key}) : super(key: key);

GlobalKey<FormState> _formKey = GlobalKey<FormState>();

static Widget builder(BuildContext context) { return BlocProvider<LoginBloc>(create: (context) => LoginBloc(LoginState(loginModelObj: LoginModel()))..add(LoginInitialEvent()), child: LoginScreen()); } 
@override Widget build(BuildContext context) { mediaQueryData = MediaQuery.of(context); return SafeArea(child: Scaffold(resizeToAvoidBottomInset: false, body: Form(key: _formKey, child: SizedBox(width: double.maxFinite, child: Column(children: [SizedBox(height: 88.v), CustomImageView(imagePath: ImageConstant.imgGroup231Indigo300, height: 84.v, width: 126.h), SizedBox(height: 66.v), Text("lbl_welcome".tr, style: theme.textTheme.headlineMedium), SizedBox(height: 30.v), Padding(padding: EdgeInsets.symmetric(horizontal: 48.h), child: BlocSelector<LoginBloc, LoginState, TextEditingController?>(selector: (state) => state.priceController, builder: (context, priceController) {return CustomTextFormField(controller: priceController, hintText: "lbl_user_name".tr, prefix: Container(margin: EdgeInsets.fromLTRB(20.h, 20.v, 30.h, 20.v), child: CustomImageView(imagePath: ImageConstant.imgUser, height: 19.adaptSize, width: 19.adaptSize)), prefixConstraints: BoxConstraints(maxHeight: 61.v), validator: (value) {if (!isText(value)) {return "err_msg_please_enter_valid_text".tr;} return null;}, contentPadding: EdgeInsets.only(top: 23.v, right: 30.h, bottom: 23.v), borderDecoration: TextFormFieldStyleHelper.outlineBlueGray, filled: false);})), SizedBox(height: 30.v), Padding(padding: EdgeInsets.symmetric(horizontal: 48.h), child: BlocSelector<LoginBloc, LoginState, TextEditingController?>(selector: (state) => state.passwordController, builder: (context, passwordController) {return CustomTextFormField(controller: passwordController, hintText: "msg".tr, textInputAction: TextInputAction.done, textInputType: TextInputType.visiblePassword, validator: (value) {if (value == null || (!isValidPassword(value, isRequired: true))) {return "err_msg_please_enter_valid_password".tr;} return null;}, obscureText: true);})), SizedBox(height: 13.v), Align(alignment: Alignment.centerLeft, child: Padding(padding: EdgeInsets.only(left: 78.h), child: Row(children: [BlocSelector<LoginBloc, LoginState, bool?>(selector: (state) => state.isSelectedSwitch, builder: (context, isSelectedSwitch) {return CustomSwitch(value: isSelectedSwitch, onChange: (value) {context.read<LoginBloc>().add(ChangeSwitchEvent(value: value));});}), Padding(padding: EdgeInsets.only(left: 5.h, top: 3.v, bottom: 2.v), child: Text("lbl_remember_me".tr, style: CustomTextStyles.bodySmallGray60010))]))), _buildLoginScreenStack(context)]))))); } 
/// Section Widget
Widget _buildLoginScreenStack(BuildContext context) { return SizedBox(height: 390.v, width: double.maxFinite, child: Stack(alignment: Alignment.centerRight, children: [Align(alignment: Alignment.topCenter, child: Padding(padding: EdgeInsets.only(left: 132.h, top: 42.v, right: 132.h), child: Column(mainAxisSize: MainAxisSize.min, children: [CustomElevatedButton(text: "lbl_login2".tr, rightIcon: Container(margin: EdgeInsets.only(), decoration: BoxDecoration(borderRadius: BorderRadius.circular(24.h)), child: CustomImageView(imagePath: ImageConstant.imgRectangle121, height: 49.v, width: 165.h)), buttonStyle: CustomButtonStyles.none, decoration: CustomButtonStyles.gradientGreenAToErrorContainerTL24Decoration, onPressed: () {onLogin(context);}), SizedBox(height: 17.v), Text("msg_forget_password".tr, style: CustomTextStyles.bodySmallGray60010)]))), CustomImageView(imagePath: ImageConstant.imgPlay, height: 85.v, width: 76.h, alignment: Alignment.centerRight, margin: EdgeInsets.only(right: 13.h)), CustomImageView(imagePath: ImageConstant.imgPlay, height: 85.v, width: 76.h, alignment: Alignment.bottomRight, margin: EdgeInsets.only(right: 164.h, bottom: 105.v)), Align(alignment: Alignment.bottomLeft, child: Padding(padding: EdgeInsets.only(left: 26.h, bottom: 63.v), child: Row(crossAxisAlignment: CrossAxisAlignment.start, children: [CustomImageView(imagePath: ImageConstant.imgPolygon6, height: 46.v, width: 42.h, margin: EdgeInsets.only(top: 22.v, bottom: 38.v)), CustomImageView(imagePath: ImageConstant.imgPlay, height: 62.v, width: 57.h, margin: EdgeInsets.only(top: 45.v)), Padding(padding: EdgeInsets.only(left: 9.h, bottom: 47.v), child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [CustomImageView(imagePath: ImageConstant.imgPolygon6, height: 23.v, width: 21.h), SizedBox(height: 7.v), CustomImageView(imagePath: ImageConstant.imgPolygon9, height: 29.v, width: 26.h)]))]))), CustomImageView(imagePath: ImageConstant.imgPolygon6, height: 46.v, width: 42.h, alignment: Alignment.topRight, margin: EdgeInsets.only(top: 138.v, right: 117.h)), CustomImageView(imagePath: ImageConstant.imgPolygon6, height: 29.v, width: 26.h, alignment: Alignment.centerRight, margin: EdgeInsets.only(right: 143.h)), CustomImageView(imagePath: ImageConstant.imgPolygon1, height: 390.v, width: 430.h, alignment: Alignment.bottomCenter)])); } 
/// Calls the {{Test_URL}}/auth/login API and triggers a [CreateLoginEvent] event on the [LoginBloc] bloc.
///
/// Validates the form and triggers a [CreateLoginEvent] event on the [LoginBloc] bloc if the form is valid.
/// The [BuildContext] parameter represents current [BuildContext]
onLogin(BuildContext context) { if(_formKey.currentState!.validate()) {context.read<LoginBloc>().add(CreateLoginEvent(onCreateLoginEventSuccess: () {

_onLoginDeviceAuthEventSuccess(context);
},onCreateLoginEventError: () {

_onLoginDeviceAuthEventError(context);
},),);
} } 
/// Navigates to the homeScreen when the action is triggered.
void _onLoginDeviceAuthEventSuccess(BuildContext context) { NavigatorService.pushNamed(AppRoutes.homeScreen, ); } 
/// Displays a snackBar message when the action is triggered.
/// The data is retrieved from the `PostLoginDeviceAuthResp` property of the 
/// `LoginBloc` using the `context.read` method.}
void _onLoginDeviceAuthEventError(BuildContext context) { 
ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(context.read<LoginBloc>().postLoginDeviceAuthResp.user?.username.toString() ?? ))); } 
 }
